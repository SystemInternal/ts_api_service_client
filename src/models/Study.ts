/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
} from './Author';

/**
 * Study.
 * @export
 * @interface Study
 */
export interface Study {
    /**
     * Unique identifier
     * @type {string}
     * @memberof Study
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Study
     */
    doi?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Study
     */
    pmid?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Study
     */
    title?: string | null;
    /**
     * 
     * @type {Array<Author>}
     * @memberof Study
     */
    authors?: Array<Author> | null;
    /**
     * 
     * @type {string}
     * @memberof Study
     */
    journal?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Study
     */
    publishDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Study
     */
    population?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Study
     */
    sampleSize?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Study
     */
    summary?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Study
     */
    citedBy?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Study
     */
    studyType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Study
     */
    retractionReason?: string | null;
}

/**
 * Check if a given object implements the Study interface.
 */
export function instanceOfStudy(value: object): value is Study {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function StudyFromJSON(json: any): Study {
    return StudyFromJSONTyped(json, false);
}

export function StudyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Study {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'doi': json['doi'] == null ? undefined : json['doi'],
        'pmid': json['pmid'] == null ? undefined : json['pmid'],
        'title': json['title'] == null ? undefined : json['title'],
        'authors': json['authors'] == null ? undefined : ((json['authors'] as Array<any>).map(AuthorFromJSON)),
        'journal': json['journal'] == null ? undefined : json['journal'],
        'publishDate': json['publish_date'] == null ? undefined : (new Date(json['publish_date'])),
        'population': json['population'] == null ? undefined : json['population'],
        'sampleSize': json['sample_size'] == null ? undefined : json['sample_size'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'citedBy': json['cited_by'] == null ? undefined : json['cited_by'],
        'studyType': json['study_type'] == null ? undefined : json['study_type'],
        'retractionReason': json['retraction_reason'] == null ? undefined : json['retraction_reason'],
    };
}

export function StudyToJSON(value?: Study | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'doi': value['doi'],
        'pmid': value['pmid'],
        'title': value['title'],
        'authors': value['authors'] == null ? undefined : ((value['authors'] as Array<any>).map(AuthorToJSON)),
        'journal': value['journal'],
        'publish_date': value['publishDate'] == null ? undefined : ((value['publishDate'] as any).toISOString().substring(0,10)),
        'population': value['population'],
        'sample_size': value['sampleSize'],
        'summary': value['summary'],
        'cited_by': value['citedBy'],
        'study_type': value['studyType'],
        'retraction_reason': value['retractionReason'],
    };
}

