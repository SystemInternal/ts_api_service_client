/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Statistic type.
 * @export
 */
export const StatisticType = {
    OddsRatio: 'odds_ratio',
    AdjustedOddsRatio: 'adjusted_odds_ratio',
    HazardRatio: 'hazard_ratio',
    AdjustedHazardRatio: 'adjusted_hazard_ratio',
    RelativeRiskRatio: 'relative_risk_ratio',
    Coefficient: 'coefficient',
    PearsonR: 'pearson_r',
    IncidentRateRatio: 'incident_rate_ratio',
    PrevalenceRatio: 'prevalence_ratio',
    SpearmanCorrelation: 'spearman_correlation',
    MeanDifferenceStandardized: 'mean_difference_standardized',
    MeanDifferenceUnstandardized: 'mean_difference_unstandardized',
    RiskDifference: 'risk_difference',
    CoefficientOfDetermination: 'coefficient_of_determination',
    TTest: 't_test',
    Elasticity: 'elasticity',
    GiniCoefficient: 'gini_coefficient'
} as const;
export type StatisticType = typeof StatisticType[keyof typeof StatisticType];


export function instanceOfStatisticType(value: any): boolean {
    for (const key in StatisticType) {
        if (Object.prototype.hasOwnProperty.call(StatisticType, key)) {
            if ((StatisticType as Record<string, StatisticType>)[key] === value) {
                return true;
            }
        }
    }
    return false;
}

export function StatisticTypeFromJSON(json: any): StatisticType {
    return StatisticTypeFromJSONTyped(json, false);
}

export function StatisticTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatisticType {
    return json as StatisticType;
}

export function StatisticTypeToJSON(value?: StatisticType | null): any {
    return value as any;
}

