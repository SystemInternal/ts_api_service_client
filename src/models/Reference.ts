/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GuidelineMetadata } from './GuidelineMetadata';
import {
    GuidelineMetadataFromJSON,
    GuidelineMetadataFromJSONTyped,
    GuidelineMetadataToJSON,
} from './GuidelineMetadata';
import type { GuidelineGrades } from './GuidelineGrades';
import {
    GuidelineGradesFromJSON,
    GuidelineGradesFromJSONTyped,
    GuidelineGradesToJSON,
} from './GuidelineGrades';

/**
 * Reference
 * @export
 * @interface Reference
 */
export interface Reference {
    /**
     * 
     * @type {number}
     * @memberof Reference
     */
    index: number;
    /**
     * 
     * @type {string}
     * @memberof Reference
     */
    recommendationText: string;
    /**
     * 
     * @type {Array<GuidelineGrades>}
     * @memberof Reference
     */
    grade: Array<GuidelineGrades>;
    /**
     * 
     * @type {GuidelineMetadata}
     * @memberof Reference
     */
    metadata: GuidelineMetadata;
}

/**
 * Check if a given object implements the Reference interface.
 */
export function instanceOfReference(value: object): value is Reference {
    if (!('index' in value) || value['index'] === undefined) return false;
    if (!('recommendationText' in value) || value['recommendationText'] === undefined) return false;
    if (!('grade' in value) || value['grade'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function ReferenceFromJSON(json: any): Reference {
    return ReferenceFromJSONTyped(json, false);
}

export function ReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reference {
    if (json == null) {
        return json;
    }
    return {
        
        'index': json['index'],
        'recommendationText': json['recommendation_text'],
        'grade': ((json['grade'] as Array<any>).map(GuidelineGradesFromJSON)),
        'metadata': GuidelineMetadataFromJSON(json['metadata']),
    };
}

export function ReferenceToJSON(value?: Reference | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'index': value['index'],
        'recommendation_text': value['recommendationText'],
        'grade': ((value['grade'] as Array<any>).map(GuidelineGradesToJSON)),
        'metadata': GuidelineMetadataToJSON(value['metadata']),
    };
}

