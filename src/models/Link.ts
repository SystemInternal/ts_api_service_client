/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    target: string;
    /**
     * 
     * @type {Date}
     * @memberof Link
     */
    lastPublished?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof Link
     */
    medianEffectSize?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Link
     */
    numStudies: number;
    /**
     * 
     * @type {number}
     * @memberof Link
     */
    highestCited?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Link
     */
    numSignificantFindings: number;
    /**
     * 
     * @type {number}
     * @memberof Link
     */
    numFindings: number;
}

/**
 * Check if a given object implements the Link interface.
 */
export function instanceOfLink(value: object): value is Link {
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('target' in value) || value['target'] === undefined) return false;
    if (!('numStudies' in value) || value['numStudies'] === undefined) return false;
    if (!('numSignificantFindings' in value) || value['numSignificantFindings'] === undefined) return false;
    if (!('numFindings' in value) || value['numFindings'] === undefined) return false;
    return true;
}

export function LinkFromJSON(json: any): Link {
    return LinkFromJSONTyped(json, false);
}

export function LinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Link {
    if (json == null) {
        return json;
    }
    return {
        
        'source': json['source'],
        'target': json['target'],
        'lastPublished': json['last_published'] == null ? undefined : (new Date(json['last_published'])),
        'medianEffectSize': json['median_effect_size'] == null ? undefined : json['median_effect_size'],
        'numStudies': json['num_studies'],
        'highestCited': json['highest_cited'] == null ? undefined : json['highest_cited'],
        'numSignificantFindings': json['num_significant_findings'],
        'numFindings': json['num_findings'],
    };
}

export function LinkToJSON(value?: Link | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'source': value['source'],
        'target': value['target'],
        'last_published': value['lastPublished'] == null ? undefined : ((value['lastPublished'] as any).toISOString()),
        'median_effect_size': value['medianEffectSize'],
        'num_studies': value['numStudies'],
        'highest_cited': value['highestCited'],
        'num_significant_findings': value['numSignificantFindings'],
        'num_findings': value['numFindings'],
    };
}

