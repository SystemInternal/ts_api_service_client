/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Graph } from './Graph';
import {
    GraphFromJSON,
    GraphFromJSONTyped,
    GraphToJSON,
} from './Graph';

/**
 * 
 * @export
 * @interface PostCypherGraphData
 */
export interface PostCypherGraphData {
    /**
     * 
     * @type {string}
     * @memberof PostCypherGraphData
     */
    type: PostCypherGraphDataTypeEnum;
    /**
     * 
     * @type {Graph}
     * @memberof PostCypherGraphData
     */
    content: Graph;
}


/**
 * @export
 */
export const PostCypherGraphDataTypeEnum = {
    Graph: 'graph'
} as const;
export type PostCypherGraphDataTypeEnum = typeof PostCypherGraphDataTypeEnum[keyof typeof PostCypherGraphDataTypeEnum];


/**
 * Check if a given object implements the PostCypherGraphData interface.
 */
export function instanceOfPostCypherGraphData(value: object): value is PostCypherGraphData {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function PostCypherGraphDataFromJSON(json: any): PostCypherGraphData {
    return PostCypherGraphDataFromJSONTyped(json, false);
}

export function PostCypherGraphDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCypherGraphData {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'content': GraphFromJSON(json['content']),
    };
}

export function PostCypherGraphDataToJSON(value?: PostCypherGraphData | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'content': GraphToJSON(value['content']),
    };
}

