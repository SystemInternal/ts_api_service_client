/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Node } from './Node';
import {
    NodeFromJSON,
    NodeFromJSONTyped,
    NodeToJSON,
} from './Node';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
} from './Link';

/**
 * 
 * @export
 * @interface Graph
 */
export interface Graph {
    /**
     * 
     * @type {boolean}
     * @memberof Graph
     */
    directed: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Graph
     */
    multigraph: boolean;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Graph
     */
    nodes: Array<Node>;
    /**
     * 
     * @type {Array<Link>}
     * @memberof Graph
     */
    links: Array<Link>;
}

/**
 * Check if a given object implements the Graph interface.
 */
export function instanceOfGraph(value: object): value is Graph {
    if (!('directed' in value) || value['directed'] === undefined) return false;
    if (!('multigraph' in value) || value['multigraph'] === undefined) return false;
    if (!('nodes' in value) || value['nodes'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    return true;
}

export function GraphFromJSON(json: any): Graph {
    return GraphFromJSONTyped(json, false);
}

export function GraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): Graph {
    if (json == null) {
        return json;
    }
    return {
        
        'directed': json['directed'],
        'multigraph': json['multigraph'],
        'nodes': ((json['nodes'] as Array<any>).map(NodeFromJSON)),
        'links': ((json['links'] as Array<any>).map(LinkFromJSON)),
    };
}

export function GraphToJSON(value?: Graph | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'directed': value['directed'],
        'multigraph': value['multigraph'],
        'nodes': ((value['nodes'] as Array<any>).map(NodeToJSON)),
        'links': ((value['links'] as Array<any>).map(LinkToJSON)),
    };
}

