/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Synthesis summary scores.
 * @export
 * @interface SynthesisScores
 */
export interface SynthesisScores {
    /**
     * 
     * @type {number}
     * @memberof SynthesisScores
     */
    score?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SynthesisScores
     */
    reasoning?: string | null;
}

/**
 * Check if a given object implements the SynthesisScores interface.
 */
export function instanceOfSynthesisScores(value: object): value is SynthesisScores {
    return true;
}

export function SynthesisScoresFromJSON(json: any): SynthesisScores {
    return SynthesisScoresFromJSONTyped(json, false);
}

export function SynthesisScoresFromJSONTyped(json: any, ignoreDiscriminator: boolean): SynthesisScores {
    if (json == null) {
        return json;
    }
    return {
        
        'score': json['score'] == null ? undefined : json['score'],
        'reasoning': json['reasoning'] == null ? undefined : json['reasoning'],
    };
}

export function SynthesisScoresToJSON(value?: SynthesisScores | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'score': value['score'],
        'reasoning': value['reasoning'],
    };
}

