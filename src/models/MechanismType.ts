/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Mechanisms for mechanistic findings.
 * @export
 */
export const MechanismType = {
    Activation: 'Activation',
    Inhibition: 'Inhibition',
    PositiveRegulation: 'PositiveRegulation',
    NegativeRegulation: 'NegativeRegulation',
    Phosphorylation: 'Phosphorylation',
    Dephosphorylation: 'Dephosphorylation',
    IncreaseAmount: 'IncreaseAmount',
    DecreaseAmount: 'DecreaseAmount',
    Complex: 'Complex',
    Conversion: 'Conversion',
    Gef: 'Gef',
    Gap: 'Gap',
    Modification: 'Modification',
    Affect: 'Affect',
    Ubiquitination: 'Ubiquitination',
    Deubiquitination: 'Deubiquitination',
    Sumoylation: 'Sumoylation',
    Desumoylation: 'Desumoylation',
    Hydroxylation: 'Hydroxylation',
    Dehydroxylation: 'Dehydroxylation',
    Acetylation: 'Acetylation',
    Deacetylation: 'Deacetylation',
    Glycosylation: 'Glycosylation',
    Deglycosylation: 'Deglycosylation',
    Farnesylation: 'Farnesylation',
    Defarnesylation: 'Defarnesylation',
    Geranylgeranylation: 'Geranylgeranylation',
    Degeranylgeranylation: 'Degeranylgeranylation',
    Palmitoylation: 'Palmitoylation',
    Depalmitoylation: 'Depalmitoylation',
    Myristoylation: 'Myristoylation',
    Demyristoylation: 'Demyristoylation',
    Ribosylation: 'Ribosylation',
    Deribosylation: 'Deribosylation',
    Methylation: 'Methylation',
    Demethylation: 'Demethylation'
} as const;
export type MechanismType = typeof MechanismType[keyof typeof MechanismType];


export function instanceOfMechanismType(value: any): boolean {
    for (const key in MechanismType) {
        if (Object.prototype.hasOwnProperty.call(MechanismType, key)) {
            if ((MechanismType as Record<string, MechanismType>)[key] === value) {
                return true;
            }
        }
    }
    return false;
}

export function MechanismTypeFromJSON(json: any): MechanismType {
    return MechanismTypeFromJSONTyped(json, false);
}

export function MechanismTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MechanismType {
    return json as MechanismType;
}

export function MechanismTypeToJSON(value?: MechanismType | null): any {
    return value as any;
}

