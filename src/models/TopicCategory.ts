/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Topic category.
 * @export
 */
export const TopicCategory = {
    BiomedicalDiseasesDisorders: 'Biomedical - Diseases & disorders',
    BiomedicalHospitalization: 'Biomedical - Hospitalization',
    BiomedicalMortalitySurvival: 'Biomedical - Mortality/survival',
    BiomedicalPathogen: 'Biomedical - Pathogen',
    BiomedicalEthnicity: 'Biomedical - Ethnicity',
    BiomedicalOtherBiologicalFactors: 'Biomedical - Other biological factors',
    BiomedicalAnthropometry: 'Biomedical - Anthropometry',
    BiomedicalAge: 'Biomedical - Age',
    BiomedicalSex: 'Biomedical - Sex',
    BiomedicalCarcinogen: 'Biomedical - Carcinogen',
    BiomedicalGenetics: 'Biomedical - Genetics',
    BehavioralPersonalHygiene: 'Behavioral - Personal hygiene',
    BehavioralOtherDietaryFactors: 'Behavioral - Other dietary factors',
    BehavioralStress: 'Behavioral - Stress',
    BehavioralSubstanceUse: 'Behavioral - Substance use',
    BehavioralEatingBehaviors: 'Behavioral - Eating behaviors',
    BehavioralSleep: 'Behavioral - Sleep',
    BehavioralPhysicalActivity: 'Behavioral - Physical activity',
    BehavioralOtherBehavioralFactors: 'Behavioral - Other behavioral factors',
    BehavioralSexualBehavior: 'Behavioral - Sexual behavior',
    EnvironmentalAirQuality: 'Environmental - Air quality',
    EnvironmentalWaterQuality: 'Environmental - Water quality',
    EnvironmentalWeatherAndClimateChange: 'Environmental - Weather and climate change',
    EnvironmentalOtherEnvironmentalFactors: 'Environmental - Other environmental factors',
    SocialEducation: 'Social - Education',
    SocialEconomicContext: 'Social - Economic context',
    SocialOtherSocialFactors: 'Social - Other social factors',
    SocialPhysicalInfrastructure: 'Social - Physical infrastructure',
    SocialSocialContext: 'Social - Social context',
    SocialHealthcareContext: 'Social - Healthcare context',
    SocialOccupation: 'Social - Occupation',
    SocialGeography: 'Social - Geography',
    SocialOccupationalContext: 'Social - Occupational context',
    Healing: 'Healing',
    Preventative: 'Preventative',
    Diagnostic: 'Diagnostic',
    Preservative: 'Preservative',
    Managing: 'Managing',
    Therapeutic: 'Therapeutic',
    Other: 'Other'
} as const;
export type TopicCategory = typeof TopicCategory[keyof typeof TopicCategory];


export function instanceOfTopicCategory(value: any): boolean {
    for (const key in TopicCategory) {
        if (Object.prototype.hasOwnProperty.call(TopicCategory, key)) {
            if ((TopicCategory as Record<string, TopicCategory>)[key] === value) {
                return true;
            }
        }
    }
    return false;
}

export function TopicCategoryFromJSON(json: any): TopicCategory {
    return TopicCategoryFromJSONTyped(json, false);
}

export function TopicCategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): TopicCategory {
    return json as TopicCategory;
}

export function TopicCategoryToJSON(value?: TopicCategory | null): any {
    return value as any;
}

