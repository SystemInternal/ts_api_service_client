/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CypherRelationshipSchema } from './CypherRelationshipSchema';
import {
    CypherRelationshipSchemaFromJSON,
    CypherRelationshipSchemaFromJSONTyped,
    CypherRelationshipSchemaToJSON,
} from './CypherRelationshipSchema';
import type { CypherNodeSchema } from './CypherNodeSchema';
import {
    CypherNodeSchemaFromJSON,
    CypherNodeSchemaFromJSONTyped,
    CypherNodeSchemaToJSON,
} from './CypherNodeSchema';

/**
 * 
 * @export
 * @interface CypherSchema
 */
export interface CypherSchema {
    /**
     * 
     * @type {Array<CypherNodeSchema>}
     * @memberof CypherSchema
     */
    nodes: Array<CypherNodeSchema>;
    /**
     * 
     * @type {Array<CypherRelationshipSchema>}
     * @memberof CypherSchema
     */
    relationships: Array<CypherRelationshipSchema>;
}

/**
 * Check if a given object implements the CypherSchema interface.
 */
export function instanceOfCypherSchema(value: object): value is CypherSchema {
    if (!('nodes' in value) || value['nodes'] === undefined) return false;
    if (!('relationships' in value) || value['relationships'] === undefined) return false;
    return true;
}

export function CypherSchemaFromJSON(json: any): CypherSchema {
    return CypherSchemaFromJSONTyped(json, false);
}

export function CypherSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CypherSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'nodes': ((json['nodes'] as Array<any>).map(CypherNodeSchemaFromJSON)),
        'relationships': ((json['relationships'] as Array<any>).map(CypherRelationshipSchemaFromJSON)),
    };
}

export function CypherSchemaToJSON(value?: CypherSchema | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'nodes': ((value['nodes'] as Array<any>).map(CypherNodeSchemaToJSON)),
        'relationships': ((value['relationships'] as Array<any>).map(CypherRelationshipSchemaToJSON)),
    };
}

