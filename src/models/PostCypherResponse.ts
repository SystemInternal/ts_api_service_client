/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CypherError } from './CypherError';
import {
    CypherErrorFromJSON,
    CypherErrorFromJSONTyped,
    CypherErrorToJSON,
} from './CypherError';
import type { PostCypherData } from './PostCypherData';
import {
    PostCypherDataFromJSON,
    PostCypherDataFromJSONTyped,
    PostCypherDataToJSON,
} from './PostCypherData';

/**
 * 
 * @export
 * @interface PostCypherResponse
 */
export interface PostCypherResponse {
    /**
     * 
     * @type {PostCypherData}
     * @memberof PostCypherResponse
     */
    data?: PostCypherData | null;
    /**
     * 
     * @type {CypherError}
     * @memberof PostCypherResponse
     */
    error?: CypherError | null;
}

/**
 * Check if a given object implements the PostCypherResponse interface.
 */
export function instanceOfPostCypherResponse(value: object): value is PostCypherResponse {
    return true;
}

export function PostCypherResponseFromJSON(json: any): PostCypherResponse {
    return PostCypherResponseFromJSONTyped(json, false);
}

export function PostCypherResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCypherResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'data': json['data'] == null ? undefined : PostCypherDataFromJSON(json['data']),
        'error': json['error'] == null ? undefined : CypherErrorFromJSON(json['error']),
    };
}

export function PostCypherResponseToJSON(value?: PostCypherResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'data': PostCypherDataToJSON(value['data']),
        'error': CypherErrorToJSON(value['error']),
    };
}

