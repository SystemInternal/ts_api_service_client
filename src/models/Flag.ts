/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Flag.
 * @export
 * @interface Flag
 */
export interface Flag {
    /**
     * 
     * @type {string}
     * @memberof Flag
     */
    flaggedProperty: string;
    /**
     * 
     * @type {string}
     * @memberof Flag
     */
    reason?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Flag
     */
    resourceId: string;
    /**
     * 
     * @type {string}
     * @memberof Flag
     */
    systemId: string;
}

/**
 * Check if a given object implements the Flag interface.
 */
export function instanceOfFlag(value: object): value is Flag {
    if (!('flaggedProperty' in value) || value['flaggedProperty'] === undefined) return false;
    if (!('resourceId' in value) || value['resourceId'] === undefined) return false;
    if (!('systemId' in value) || value['systemId'] === undefined) return false;
    return true;
}

export function FlagFromJSON(json: any): Flag {
    return FlagFromJSONTyped(json, false);
}

export function FlagFromJSONTyped(json: any, ignoreDiscriminator: boolean): Flag {
    if (json == null) {
        return json;
    }
    return {
        
        'flaggedProperty': json['flagged_property'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'resourceId': json['resource_id'],
        'systemId': json['system_id'],
    };
}

export function FlagToJSON(value?: Flag | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'flagged_property': value['flaggedProperty'],
        'reason': value['reason'],
        'resource_id': value['resourceId'],
        'system_id': value['systemId'],
    };
}

