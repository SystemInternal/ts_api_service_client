/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { PostCypherGraphData } from './PostCypherGraphData';
import {
    instanceOfPostCypherGraphData,
    PostCypherGraphDataFromJSON,
    PostCypherGraphDataFromJSONTyped,
    PostCypherGraphDataToJSON,
} from './PostCypherGraphData';
import type { PostCypherRecordsData } from './PostCypherRecordsData';
import {
    instanceOfPostCypherRecordsData,
    PostCypherRecordsDataFromJSON,
    PostCypherRecordsDataFromJSONTyped,
    PostCypherRecordsDataToJSON,
} from './PostCypherRecordsData';

/**
 * @type PostCypherData
 * 
 * @export
 */
export type PostCypherData = { type: 'graph' } & PostCypherGraphData | { type: 'records' } & PostCypherRecordsData;

export function PostCypherDataFromJSON(json: any): PostCypherData {
    return PostCypherDataFromJSONTyped(json, false);
}

export function PostCypherDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCypherData {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'graph':
            return Object.assign({}, PostCypherGraphDataFromJSONTyped(json, true), { type: 'graph' } as const);
        case 'records':
            return Object.assign({}, PostCypherRecordsDataFromJSONTyped(json, true), { type: 'records' } as const);
        default:
            throw new Error(`No variant of PostCypherData exists with 'type=${json['type']}'`);
    }
}

export function PostCypherDataToJSON(value?: PostCypherData | null): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'graph':
            return PostCypherGraphDataToJSON(value);
        case 'records':
            return PostCypherRecordsDataToJSON(value);
        default:
            throw new Error(`No variant of PostCypherData exists with 'type=${value['type']}'`);
    }

}

