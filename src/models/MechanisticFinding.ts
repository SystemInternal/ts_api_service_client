/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NestedStudy } from './NestedStudy';
import {
    NestedStudyFromJSON,
    NestedStudyFromJSONTyped,
    NestedStudyToJSON,
} from './NestedStudy';
import type { NestedResource } from './NestedResource';
import {
    NestedResourceFromJSON,
    NestedResourceFromJSONTyped,
    NestedResourceToJSON,
} from './NestedResource';

/**
 * Mechanistic finding.
 * @export
 * @interface MechanisticFinding
 */
export interface MechanisticFinding {
    /**
     * Unique identifier
     * @type {string}
     * @memberof MechanisticFinding
     */
    id: string;
    /**
     * Whether finding is flagged
     * @type {boolean}
     * @memberof MechanisticFinding
     */
    flagged?: boolean;
    /**
     * Type of finding
     * @type {string}
     * @memberof MechanisticFinding
     */
    findingType?: MechanisticFindingFindingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MechanisticFinding
     */
    summary?: string | null;
    /**
     * 
     * @type {NestedResource}
     * @memberof MechanisticFinding
     */
    topic1?: NestedResource | null;
    /**
     * 
     * @type {NestedResource}
     * @memberof MechanisticFinding
     */
    topic2?: NestedResource | null;
    /**
     * Source variable of the finding
     * @type {NestedResource}
     * @memberof MechanisticFinding
     */
    variable1?: NestedResource;
    /**
     * Target variable of the finding
     * @type {NestedResource}
     * @memberof MechanisticFinding
     */
    variable2?: NestedResource;
    /**
     * Study supporting the finding
     * @type {NestedStudy}
     * @memberof MechanisticFinding
     */
    study?: NestedStudy;
    /**
     * 
     * @type {string}
     * @memberof MechanisticFinding
     */
    mechanismType?: string | null;
}


/**
 * @export
 */
export const MechanisticFindingFindingTypeEnum = {
    Mechanistic: 'mechanistic'
} as const;
export type MechanisticFindingFindingTypeEnum = typeof MechanisticFindingFindingTypeEnum[keyof typeof MechanisticFindingFindingTypeEnum];


/**
 * Check if a given object implements the MechanisticFinding interface.
 */
export function instanceOfMechanisticFinding(value: object): value is MechanisticFinding {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function MechanisticFindingFromJSON(json: any): MechanisticFinding {
    return MechanisticFindingFromJSONTyped(json, false);
}

export function MechanisticFindingFromJSONTyped(json: any, ignoreDiscriminator: boolean): MechanisticFinding {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'flagged': json['flagged'] == null ? undefined : json['flagged'],
        'findingType': json['finding_type'] == null ? undefined : json['finding_type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'topic1': json['topic_1'] == null ? undefined : NestedResourceFromJSON(json['topic_1']),
        'topic2': json['topic_2'] == null ? undefined : NestedResourceFromJSON(json['topic_2']),
        'variable1': json['variable_1'] == null ? undefined : NestedResourceFromJSON(json['variable_1']),
        'variable2': json['variable_2'] == null ? undefined : NestedResourceFromJSON(json['variable_2']),
        'study': json['study'] == null ? undefined : NestedStudyFromJSON(json['study']),
        'mechanismType': json['mechanism_type'] == null ? undefined : json['mechanism_type'],
    };
}

export function MechanisticFindingToJSON(value?: MechanisticFinding | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'flagged': value['flagged'],
        'finding_type': value['findingType'],
        'summary': value['summary'],
        'topic_1': NestedResourceToJSON(value['topic1']),
        'topic_2': NestedResourceToJSON(value['topic2']),
        'variable_1': NestedResourceToJSON(value['variable1']),
        'variable_2': NestedResourceToJSON(value['variable2']),
        'study': NestedStudyToJSON(value['study']),
        'mechanism_type': value['mechanismType'],
    };
}

