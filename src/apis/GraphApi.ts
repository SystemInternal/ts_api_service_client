/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CypherPayload,
  CypherResponse,
  CypherSchema,
  GraphResponse,
  HTTPValidationError,
} from '../models/index';
import {
    CypherPayloadFromJSON,
    CypherPayloadToJSON,
    CypherResponseFromJSON,
    CypherResponseToJSON,
    CypherSchemaFromJSON,
    CypherSchemaToJSON,
    GraphResponseFromJSON,
    GraphResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetSubgraphByTopicIdRequest {
    topicId: string;
    nDegree?: number | null;
}

export interface PostCypherQueryRequest {
    cypherPayload: CypherPayload;
}

/**
 * 
 */
export class GraphApi extends runtime.BaseAPI {

    /**
     * Schema for node and relationship properties to query in cypher.
     * Schema for cypher queries
     */
    async getCypherSchemaRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CypherSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/graph/cypher/schema`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CypherSchemaFromJSON(jsonValue));
    }

    /**
     * Schema for node and relationship properties to query in cypher.
     * Schema for cypher queries
     */
    async getCypherSchema(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CypherSchema> {
        const response = await this.getCypherSchemaRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets a subgraph of a topic by id.         The subgraph includes upstream and downstream relationships within n degrees.
     * Get subgraph by topic id
     */
    async getSubgraphByTopicIdRaw(requestParameters: GetSubgraphByTopicIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GraphResponse>> {
        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getSubgraphByTopicId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nDegree'] != null) {
            queryParameters['n_degree'] = requestParameters['nDegree'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/graph/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraphResponseFromJSON(jsonValue));
    }

    /**
     * Gets a subgraph of a topic by id.         The subgraph includes upstream and downstream relationships within n degrees.
     * Get subgraph by topic id
     */
    async getSubgraphByTopicId(requestParameters: GetSubgraphByTopicIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GraphResponse> {
        const response = await this.getSubgraphByTopicIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query the topic graph with any cypher query.         For querying:         - The node type is Topic.         - The relationship type is `RELATES_TO`.         - The schema is provided by the `/cypher/schema` endpoint.
     * Query graph with cypher
     */
    async postCypherQueryRaw(requestParameters: PostCypherQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CypherResponse>> {
        if (requestParameters['cypherPayload'] == null) {
            throw new runtime.RequiredError(
                'cypherPayload',
                'Required parameter "cypherPayload" was null or undefined when calling postCypherQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/graph/cypher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CypherPayloadToJSON(requestParameters['cypherPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CypherResponseFromJSON(jsonValue));
    }

    /**
     * Query the topic graph with any cypher query.         For querying:         - The node type is Topic.         - The relationship type is `RELATES_TO`.         - The schema is provided by the `/cypher/schema` endpoint.
     * Query graph with cypher
     */
    async postCypherQuery(requestParameters: PostCypherQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CypherResponse> {
        const response = await this.postCypherQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
