/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ListResponseRelationship,
  ListResponseTopic,
  ListResponseTopicPath,
  ListResponseVariable,
  Topic,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListResponseRelationshipFromJSON,
    ListResponseRelationshipToJSON,
    ListResponseTopicFromJSON,
    ListResponseTopicToJSON,
    ListResponseTopicPathFromJSON,
    ListResponseTopicPathToJSON,
    ListResponseVariableFromJSON,
    ListResponseVariableToJSON,
    TopicFromJSON,
    TopicToJSON,
} from '../models/index';

export interface GetTopicByIdRequest {
    topicId: string;
}

export interface GetTopicDeterminantsRequest {
    topicId: string;
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

export interface GetTopicInterventionsRequest {
    topicId: string;
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

export interface GetTopicOutcomesRequest {
    topicId: string;
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

export interface GetTopicRelationshipsRequest {
    topicId: string;
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

export interface GetTopicVariablesRequest {
    topicId: string;
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

export interface GetTopicsRequest {
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class TopicsApi extends runtime.BaseAPI {

    /**
     * Get a topic by its ID.
     * Get a topic
     */
    async getTopicByIdRaw(requestParameters: GetTopicByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Topic>> {
        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getTopicById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/topics/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopicFromJSON(jsonValue));
    }

    /**
     * Get a topic by its ID.
     * Get a topic
     */
    async getTopicById(requestParameters: GetTopicByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Topic> {
        const response = await this.getTopicByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of determinants for a given topic. These are formatted as `TopicPath`s, which include data about the relationship and the source topic.
     * Get topic determinants
     */
    async getTopicDeterminantsRaw(requestParameters: GetTopicDeterminantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseTopicPath>> {
        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getTopicDeterminants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/topics/{topic_id}/determinants`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseTopicPathFromJSON(jsonValue));
    }

    /**
     * Get a list of determinants for a given topic. These are formatted as `TopicPath`s, which include data about the relationship and the source topic.
     * Get topic determinants
     */
    async getTopicDeterminants(requestParameters: GetTopicDeterminantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseTopicPath> {
        const response = await this.getTopicDeterminantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of interventions for a given topic. These are formatted as `TopicPath`s, which include data about the relationship and the source topic.
     * Get topic interventions
     */
    async getTopicInterventionsRaw(requestParameters: GetTopicInterventionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseTopicPath>> {
        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getTopicInterventions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/topics/{topic_id}/interventions`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseTopicPathFromJSON(jsonValue));
    }

    /**
     * Get a list of interventions for a given topic. These are formatted as `TopicPath`s, which include data about the relationship and the source topic.
     * Get topic interventions
     */
    async getTopicInterventions(requestParameters: GetTopicInterventionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseTopicPath> {
        const response = await this.getTopicInterventionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of outcomes for a given topic. These are formatted as `TopicPath`s, which include data about the relationship and the target topic.
     * Get topic outcomes
     */
    async getTopicOutcomesRaw(requestParameters: GetTopicOutcomesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseTopicPath>> {
        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getTopicOutcomes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/topics/{topic_id}/outcomes`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseTopicPathFromJSON(jsonValue));
    }

    /**
     * Get a list of outcomes for a given topic. These are formatted as `TopicPath`s, which include data about the relationship and the target topic.
     * Get topic outcomes
     */
    async getTopicOutcomes(requestParameters: GetTopicOutcomesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseTopicPath> {
        const response = await this.getTopicOutcomesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the relationships that include a given topic as the source or target topic.
     * Get topic relationships
     */
    async getTopicRelationshipsRaw(requestParameters: GetTopicRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseRelationship>> {
        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getTopicRelationships().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/topics/{topic_id}/relationships`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseRelationshipFromJSON(jsonValue));
    }

    /**
     * Get a list of the relationships that include a given topic as the source or target topic.
     * Get topic relationships
     */
    async getTopicRelationships(requestParameters: GetTopicRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseRelationship> {
        const response = await this.getTopicRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the variables that have been matched to a given topic.
     * Get topic variables
     */
    async getTopicVariablesRaw(requestParameters: GetTopicVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseVariable>> {
        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling getTopicVariables().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/topics/{topic_id}/variables`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseVariableFromJSON(jsonValue));
    }

    /**
     * Get a list of the variables that have been matched to a given topic.
     * Get topic variables
     */
    async getTopicVariables(requestParameters: GetTopicVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseVariable> {
        const response = await this.getTopicVariablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of topics.
     * Get topics
     */
    async getTopicsRaw(requestParameters: GetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseTopic>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/topics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseTopicFromJSON(jsonValue));
    }

    /**
     * Get a list of topics.
     * Get topics
     */
    async getTopics(requestParameters: GetTopicsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseTopic> {
        const response = await this.getTopicsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
