/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ListResponseStatisticalFinding,
  ListResponseStudy,
  Study,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListResponseStatisticalFindingFromJSON,
    ListResponseStatisticalFindingToJSON,
    ListResponseStudyFromJSON,
    ListResponseStudyToJSON,
    StudyFromJSON,
    StudyToJSON,
} from '../models/index';

export interface GetStudiesRequest {
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

export interface GetStudyByIdRequest {
    studyId: string;
}

export interface GetStudyStatisticalFindingsRequest {
    studyId: string;
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class StudiesApi extends runtime.BaseAPI {

    /**
     * Get a list of studies.
     * Get studies
     */
    async getStudiesRaw(requestParameters: GetStudiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseStudy>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseStudyFromJSON(jsonValue));
    }

    /**
     * Get a list of studies.
     * Get studies
     */
    async getStudies(requestParameters: GetStudiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseStudy> {
        const response = await this.getStudiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a study by its ID.
     * Get a study
     */
    async getStudyByIdRaw(requestParameters: GetStudyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Study>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling getStudyById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/studies/{study_id}`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
    }

    /**
     * Get a study by its ID.
     * Get a study
     */
    async getStudyById(requestParameters: GetStudyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Study> {
        const response = await this.getStudyByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the statistical findings reported by a given study.
     * Get study statistical findings
     */
    async getStudyStatisticalFindingsRaw(requestParameters: GetStudyStatisticalFindingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseStatisticalFinding>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling getStudyStatisticalFindings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/studies/{study_id}/statistical_findings`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseStatisticalFindingFromJSON(jsonValue));
    }

    /**
     * Get a list of the statistical findings reported by a given study.
     * Get study statistical findings
     */
    async getStudyStatisticalFindings(requestParameters: GetStudyStatisticalFindingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseStatisticalFinding> {
        const response = await this.getStudyStatisticalFindingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
