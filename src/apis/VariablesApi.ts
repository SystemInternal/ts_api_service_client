/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 *  This page provides documentation for the System REST API.  If you have any questions or need support, please contact us at the email provided.  ## Formatting query parameters  Filters should be formatted as `field:value` and use the logical OR operator `||` to specify an OR condition. (We\'ve deprecated the pipe operator for OR conditions.)   If they are numerical, they should be formatted as `field:opvalue`. Examples: - `doi:10.1234/5678||10.8765/4321` - `num_findings:>2`  Sorts should be formatted as `field:direction`. Examples: - `cited_by:desc` - `publish_date:asc`  Searches should be formatted as `field:value`. Examples: - `name:osteoporosis` 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@system.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ListResponseStatisticalFinding,
  ListResponseVariable,
  Variable,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListResponseStatisticalFindingFromJSON,
    ListResponseStatisticalFindingToJSON,
    ListResponseVariableFromJSON,
    ListResponseVariableToJSON,
    VariableFromJSON,
    VariableToJSON,
} from '../models/index';

export interface GetVariableByIdRequest {
    variableId: string;
}

export interface GetVariableStatisticalFindingsRequest {
    variableId: string;
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

export interface GetVariablesRequest {
    filter?: string | null;
    sort?: string | null;
    search?: string | null;
    fields?: string | null;
    includeTotal?: boolean | null;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * Get a variable by its ID.
     * Get a variable
     */
    async getVariableByIdRaw(requestParameters: GetVariableByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Variable>> {
        if (requestParameters['variableId'] == null) {
            throw new runtime.RequiredError(
                'variableId',
                'Required parameter "variableId" was null or undefined when calling getVariableById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/variables/{variable_id}`.replace(`{${"variable_id"}}`, encodeURIComponent(String(requestParameters['variableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableFromJSON(jsonValue));
    }

    /**
     * Get a variable by its ID.
     * Get a variable
     */
    async getVariableById(requestParameters: GetVariableByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Variable> {
        const response = await this.getVariableByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the statistical findings that include a given variable.
     * Get variable statistical findings
     */
    async getVariableStatisticalFindingsRaw(requestParameters: GetVariableStatisticalFindingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseStatisticalFinding>> {
        if (requestParameters['variableId'] == null) {
            throw new runtime.RequiredError(
                'variableId',
                'Required parameter "variableId" was null or undefined when calling getVariableStatisticalFindings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/variables/{variable_id}/statistical_findings`.replace(`{${"variable_id"}}`, encodeURIComponent(String(requestParameters['variableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseStatisticalFindingFromJSON(jsonValue));
    }

    /**
     * Get a list of the statistical findings that include a given variable.
     * Get variable statistical findings
     */
    async getVariableStatisticalFindings(requestParameters: GetVariableStatisticalFindingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseStatisticalFinding> {
        const response = await this.getVariableStatisticalFindingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of variables.
     * Get variables
     */
    async getVariablesRaw(requestParameters: GetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseVariable>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/v0/variables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseVariableFromJSON(jsonValue));
    }

    /**
     * Get a list of variables.
     * Get variables
     */
    async getVariables(requestParameters: GetVariablesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseVariable> {
        const response = await this.getVariablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
